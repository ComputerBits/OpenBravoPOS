<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>Initialization</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <directory>&#47;</directory>
    <log>
      <read/>
      <write/>
      <input/>
      <output/>
      <update/>
      <rejected/>
      <connection/>
      <table/>
      <step_performance_table/>
      <use_batchid>Y</use_batchid>
      <use_logfield>N</use_logfield>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
  <modified_user>-</modified_user>
  <modified_date>2009&#47;03&#47;25 16:10:11.412</modified_date>
  </info>
  <notepads>
  </notepads>
  <connection>
    <name>openbravoposDB</name>
    <server/>
    <type>GENERIC</type>
    <access>Native</access>
    <database/>
    <port>1521</port>
    <username>${db.user}</username>
    <password>${db.password}</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>CUSTOM_DRIVER_CLASS</code><attribute>${db.driver}</attribute></attribute>
      <attribute><code>CUSTOM_URL</code><attribute>${db.URL}</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>1521</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <order>
  <hop> <from>Get db.URL variable</from><to>Is PostgreSQL?</to><enabled>Y</enabled> </hop>  <hop> <from>Is PostgreSQL?</from><to>Switch &#47; Case</to><enabled>Y</enabled> </hop>  <hop> <from>Switch &#47; Case</from><to>END</to><enabled>Y</enabled> </hop>  <hop> <from>Switch &#47; Case</from><to>PreScript PostgreSQL</to><enabled>Y</enabled> </hop>  </order>
  <step>
    <name>END</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>548</xloc>
      <yloc>370</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Get db.URL variable</name>
    <type>GetVariable</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <fields>
      <field>
        <name>url</name>
        <variable>${db.URL}</variable>
      </field>
    </fields>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>137</xloc>
      <yloc>253</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Is PostgreSQL?</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <compatible>Y</compatible>
    <jsScripts>      <jsScript>        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>&#47;&#47;Check if it is PostgreSQL

var parts = url.getString().split(&quot;:&quot;);

var bbdd = parts[1];


</jsScript_script>
      </jsScript>    </jsScripts>    <fields>      <field>        <name>bbdd</name>
        <rename>bbdd</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>    </fields>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>268</xloc>
      <yloc>254</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>PreScript PostgreSQL</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>N</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <connection>openbravoposDB</connection>
    <execute_each_row>Y</execute_each_row>
    <replace_variables>N</replace_variables>
    <sql>CREATE OR REPLACE FUNCTION exist_language(varchar)
RETURNS bigint AS &apos; SELECT count(*) from pg_language where lanname = $1; &apos;
LANGUAGE &apos;sql&apos; STABLE; -- END

CREATE OR REPLACE FUNCTION insert_pg_language()
RETURNS integer AS &apos; CREATE TRUSTED PROCEDURAL LANGUAGE &quot;plpgsql&quot; HANDLER plpgsql_call_handler VALIDATOR plpgsql_validator; SELECT 1; &apos;
LANGUAGE &apos;sql&apos;; -- END

CREATE OR REPLACE FUNCTION create_language(varchar)
RETURNS integer AS &apos; SELECT CASE WHEN exist_language($1)=0 THEN insert_pg_language() END; SELECT 1; &apos;
LANGUAGE &apos;sql&apos;; -- END

SELECT * FROM create_language(&apos;plpgsql&apos;); -- END

CREATE OR REPLACE FUNCTION customers_visible_false(aux numeric)
  RETURNS void AS &apos; BEGIN UPDATE CUSTOMERS SET VISIBLE=false; END; &apos;
  LANGUAGE &apos;plpgsql&apos; VOLATILE
  COST 100; --END

CREATE OR REPLACE FUNCTION taxes_update_cascade(customer_id character varying, flag numeric)
  RETURNS void AS &apos; BEGIN UPDATE CUSTOMERS SET VISIBLE=flag::int::boolean WHERE ID=customer_id; END; &apos;
  LANGUAGE &apos;plpgsql&apos; VOLATILE
  COST 100; --END

CREATE OR REPLACE FUNCTION customer_update_visible(customer_id character varying, flag numeric)
  RETURNS void AS &apos; BEGIN UPDATE CUSTOMERS SET VISIBLE=flag::int::boolean WHERE ID=customer_id; END; &apos;
  LANGUAGE &apos;plpgsql&apos; VOLATILE
  COST 100; --END

CREATE OR REPLACE FUNCTION products_update_image(product_id character varying, img bytea)
  RETURNS void AS &apos; BEGIN UPDATE PRODUCTS SET IMAGE=img::bytea WHERE ID=product_id; END; &apos;
  LANGUAGE &apos;plpgsql&apos; VOLATILE
  COST 100;

</sql>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>554</xloc>
      <yloc>190</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Switch &#47; Case</name>
    <type>SwitchCase</type>
    <description/>
    <distribute>N</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
<fieldname>bbdd</fieldname>
<case_value_type>String</case_value_type>
<case_value_format/>
<case_value_decimal/>
<case_value_group/>
<default_target_step>END</default_target_step>
<cases><case><value>postgresql</value>
<target_step>PreScript PostgreSQL</target_step>
</case></cases>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>389</xloc>
      <yloc>254</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step_error_handling>
  </step_error_handling>
   <slave-step-copy-partition-distribution>
</slave-step-copy-partition-distribution>
   <slave_transformation>N</slave_transformation>
</transformation>
